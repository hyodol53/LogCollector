/** Declaration file generated by dts-gen */

declare module 'async' {

export function all(arr: any, iterator: any, main_callback: any): void;

export function any(arr: any, iterator: any, main_callback: any): void;

export function apply(fn: any, ...args: any[]): any;

export function applyEach(...args: any[]): any;

export function applyEachSeries(...args: any[]): any;

export function auto(tasks: any, callback: any, ...args: any[]): any;

export function cargo(worker: any, payload: any, ...args: any[]): any;

export function compose(...args: any[]): any;

export function concat(...args: any[]): any;

export function concatSeries(...args: any[]): any;

export function detect(...args: any[]): any;

export function detectSeries(...args: any[]): any;

export function dir(fn: any, ...args: any[]): void;

export function doUntil(iterator: any, test: any, callback: any): any;

export function doWhilst(iterator: any, test: any, callback: any): any;

export function each(arr: any, iterator: any, callback: any): any;

export function eachLimit(arr: any, limit: any, iterator: any, callback: any): void;

export function eachSeries(arr: any, iterator: any, callback: any): any;

export function every(arr: any, iterator: any, main_callback: any): void;

export function filter(...args: any[]): any;

export function filterSeries(...args: any[]): any;

export function foldl(arr: any, memo: any, iterator: any, callback: any): void;

export function foldr(arr: any, memo: any, iterator: any, callback: any): any;

export function forEach(arr: any, iterator: any, callback: any): any;

export function forEachLimit(arr: any, limit: any, iterator: any, callback: any): void;

export function forEachSeries(arr: any, iterator: any, callback: any): any;

export function forever(fn: any, callback: any): any;

export function inject(arr: any, memo: any, iterator: any, callback: any): void;

export function iterator(tasks: any, ...args: any[]): any;

export function log(fn: any, ...args: any[]): void;

export function map(...args: any[]): any;

export function mapLimit(arr: any, limit: any, iterator: any, callback: any): any;

export function mapSeries(...args: any[]): any;

export function memoize(fn: any, hasher: any, ...args: any[]): any;

export function nextTick(callback: any, ...args: any[]): void;

export function noConflict(): any;

export function parallel(tasks: any, callback: any): void;

export function parallelLimit(tasks: any, limit: any, callback: any): void;

export function queue(worker: any, concurrency: any, ...args: any[]): any;

export function reduce(arr: any, memo: any, iterator: any, callback: any): void;

export function reduceRight(arr: any, memo: any, iterator: any, callback: any): any;

export function reject(...args: any[]): any;

export function rejectSeries(...args: any[]): any;

export function select(...args: any[]): any;

export function selectSeries(...args: any[]): any;

export function series(tasks: any, callback: any, ...args: any[]): void;

export function setImmediate(fn: any): void;

export function some(arr: any, iterator: any, main_callback: any): void;

export function sortBy(arr: any, iterator: any, callback: any): any;

export function times(count: any, iterator: any, callback: any): any;

export function timesSeries(count: any, iterator: any, callback: any): any;

export function unmemoize(fn: any, ...args: any[]): any;

export function until(test: any, iterator: any, callback: any): any;

export function waterfall(tasks: any, callback: any, ...args: any[]): any;

export function whilst(test: any, iterator: any, callback: any): any;


export namespace all {
    const prototype: {
    };

}

export namespace any {
    const prototype: {
    };

}

export namespace apply {
    const prototype: {
    };

}

export namespace applyEach {
    const prototype: {
    };

}

export namespace applyEachSeries {
    const prototype: {
    };

}

export namespace auto {
    const prototype: {
    };

}

export namespace cargo {
    const prototype: {
    };

}

export namespace compose {
    const prototype: {
    };

}

export namespace concat {
    const prototype: {
    };

}

export namespace concatSeries {
    const prototype: {
    };

}

export namespace detect {
    const prototype: {
    };

}

export namespace detectSeries {
    const prototype: {
    };

}

export namespace dir {
    const prototype: {
    };

}

export namespace doUntil {
    const prototype: {
    };

}

export namespace doWhilst {
    const prototype: {
    };

}

export namespace each {
    const prototype: {
    };

}

export namespace eachLimit {
    const prototype: {
    };

}

export namespace eachSeries {
    const prototype: {
    };

}

export namespace every {
    const prototype: {
    };

}

export namespace filter {
    const prototype: {
    };

}

export namespace filterSeries {
    const prototype: {
    };

}

export namespace foldl {
    const prototype: {
    };

}

export namespace foldr {
    const prototype: {
    };

}

export namespace forEach {
    const prototype: {
    };

}

export namespace forEachLimit {
    const prototype: {
    };

}

export namespace forEachSeries {
    const prototype: {
    };

}

export namespace forever {
    const prototype: {
    };

}

export namespace inject {
    const prototype: {
    };

}

export namespace iterator {
    const prototype: {
    };

}

export namespace log {
    const prototype: {
    };

}

export namespace map {
    const prototype: {
    };

}

export namespace mapLimit {
    const prototype: {
    };

}

export namespace mapSeries {
    const prototype: {
    };

}

export namespace memoize {
    const prototype: {
    };

}

export namespace nextTick {
    const prototype: {
    };

}

export namespace noConflict {
    const prototype: {
    };

}

export namespace parallel {
    const prototype: {
    };

}

export namespace parallelLimit {
    const prototype: {
    };

}

export namespace queue {
    const prototype: {
    };

}

export namespace reduce {
    const prototype: {
    };

}

export namespace reduceRight {
    const prototype: {
    };

}

export namespace reject {
    const prototype: {
    };

}

export namespace rejectSeries {
    const prototype: {
    };

}

export namespace select {
    const prototype: {
    };

}

export namespace selectSeries {
    const prototype: {
    };

}

export namespace series {
    const prototype: {
    };

}

export namespace setImmediate {
    const prototype: {
    };

}

export namespace some {
    const prototype: {
    };

}

export namespace sortBy {
    const prototype: {
    };

}

export namespace times {
    const prototype: {
    };

}

export namespace timesSeries {
    const prototype: {
    };

}

export namespace unmemoize {
    const prototype: {
    };

}

export namespace until {
    const prototype: {
    };

}

export namespace waterfall {
    const prototype: {
    };

}

export namespace whilst {
    const prototype: {
    };

}

}